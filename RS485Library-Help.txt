//      ******************************************************************
//      *                                                                *
//      *          Header file for RS485Library-Help.txt                 *
//      *                                                                *
//      *              Copyright (c) Pratik Gupta and Josh Benson        *
//      *                                                                *
//      ******************************************************************

Notes:

This fle is to help you use the RS485 library.
    Using main.py you can:
        -add multiple slave Arduino boards
        -call from a wide range of pre written callables
        -run different methods that call from the callable list to unlock complete hardware control


As of right now the working callables include:

Callable callables[] = {
  {"moveStepper", moveStepper}, done
  {"disable", disable}, done
  {"blinkLED", blinkLED}, done
  {"toggleLED", toggleLED}, done
  {"moveStepperToPos", moveStepperToPos}, done
  {"moveStepperDeg", moveStepperDeg}, done
  {"moveStepperRev", moveStepperRev}, done
  {"moveStepperHome", moveStepperHome},
  {"setStepperSpeed", setStepperSpeed}, done
  {"setStepperAccel", setStepperAccel} done
};

Some of the callables have shorter names than what is perhaps logical or expected. For example,
setStepperAccel--a function that accelerates the stepper--would logically be named setStepperAcceleration. However,
this is too long a function name that is asked for when building the callables.

At the top of the main.py file, do a few things

Do the following import lines:

from pidev.SlaveMaster import SerialMaster, Arduino
from pidev import RPiMIB
import time

And open the path:

RPiMIB.openSPI()

Create an Arduino Object:

a = Arduino(SerialMaster(baud=115200), 17)

The line above declares 'a' as an Arduino Object, at port 17.
Each Arduino will have its own name (in this case, 'a'), and its own port, in this case '17'
The port is declared at the top of the Arduino file, with '#define ADDRESS 17'
(The port is arbitrary)
For all functions, "1" is clockwise, and "-1" is counterclockwise


void moveStepper(byte dataLength, byte *dataArray) {

    Description: Basic function to move stepper an amount of steps in a direction.
    (Use setSpeed to set the stepper speed)

    How to use:

    An example of how to call the function in the py file would be:

    print(a.moveStepper([1, 1] + list((200).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter determines the port of the motor (i.e. 1, 2...)

    The second parameter determines the direction of the stepper.
        '0' is ClockWise and '1' is CounterClockWise

    The '200' in the list to bytes section of the code is the steps.
    The stepper needs 800 steps in order to make a full revolution, when it is  in the quarter step setting.
    The step setting can be changed on the Arduino Board, and should be updated in the code.
    For example, in the full step mode, 200 steps will result in a revolution.

    The 'a' at the beginning of the call is the Arduino Object.

}

void disable(byte dataLength, byte *dataArray) {

    Description: Frees the stepper motor. This prevents overheating!

    How to use:

    An example of how to call the function in the py file would be:

    print(a.disable([1, 1] + list((800).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The disable function takes two parameters, and then does nothing with them.
    Feel free to put anything for the parameters! (Any integer between 0 and 255)

}

void blinkLED(byte dataLength, byte *dataArray) {

    Description: Blinks an LED at a specified port with a specified wait time

    How to use:

    An example of how to call the function in the py file would be:

    print(a.blinkLED([23, 200] + list((800).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter is the pin number, and the second parameter is the waitTime.

}

void toggleLED(byte dataLength, byte *dataArray) {

    Description: LED switch state must be 0 or 1. (This is the second value in dataArray)

    How to use:

    An example of how to call the function in the py file would be:

    print(a.toggleLED([23, 200] + list((800).to_bytes(2, "little")), format_out=FORMAT_STRING))



}

void setStepperSpeed(byte dataLength, byte *dataArray) {

Method Call:

    print(a.setStepperSpeed([1, 1] + list((500).to_bytes(2, "little")), format_out=FORMAT_STRING))

    Parameters: First Parameter is port, second parameter is direction, third parameter is speed

    500 serves as a good speed. 500 is what we used for both setting the speed and the acceleration in the
    void setup of the Slave file. setStepperAccel is right below!

}


void setStepperAccel(byte dataLength, byte *dataArray) {

    An example of how to call the function in the py file would be:

    print(a.setStepperAccel([1, 1] + list((200).to_bytes(2, "little")), format_out=FORMAT_STRING))

    Parameters: First Parameter is port, second parameter is direction, third parameter is acceleration rate

}


void moveStepperHome(byte dataLength, byte *dataArray) {

    An example of how to call the function in the py file would be:

    print(a.moveStepperHome([1, 1] + list((29).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter is the stepper port, the second parameter is the direction, and the list parameter is the switch port.

    In order to be accurate, the stepper actually checks if it really hit the switch during its path by reversing its direction.
    This means that the moveToHomeInSteps method actually calls the homing function multiple times,
    and reverses the direction of the stepper until it decides that it is actually at the home position

}

void moveStepperToPos(byte dataLength, byte *dataArray) {

    Description: This function moves a stepper to a specific position, in steps.

    How to use:

    An example of how to call the function in the py file would be:

    print(a.moveStepperToPos([1, 1] + list((300).to_bytes(2, "little")), format_out=FORMAT_STRING))

    Parameters:

    moveStepperToPos works by specifying a port (the first parameter), and a direction (the second parameter).
    The parameter in the list specifies a position for where the stepper should move to. In this case, it is 300.

}

void moveStepperDeg(byte dataLength, byte *dataArray) {

    Description: This function rotates the stepper, in degrees.

    An example of how to call the function in the py file would be:

    print(a.moveStepperDeg([1, 1] + list((360).to_bytes(2, "little")), format_out=FORMAT_STRING))

    moveStepperDeg works by specifying a port (the first parameter), and a direction (the second parameter).
    The list parameter (the third parameter) is the amount of degrees that you want the stepper to  turn.

}

void moveStepperRev(byte dataLength, byte *dataArray) {

    Description: This function rotates the stepper, in revolutions.

    An example of how to call the function in the py file would be:

    print(a.moveStepperRev([1, 1] + list((360).to_bytes(2, "little")), format_out=FORMAT_STRING))

    moveStepperRev works much the same way that moveStepperDeg does. The only difference is that the list
    parameter takes the number of revolutions to rotate the stepper by, and that the number must be an integer value.
    This means that you cannot run 2.5 revolutions. (To do that, use moveStepper or moveStepperDeg).
}

testStepper can be used to isolate functions from the Pi, in order