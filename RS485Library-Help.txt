//      ******************************************************************
//      *                                                                *
//      *          Header file for RS485Library-Help.txt                 *
//      *                                                                *
//      *              Copyright (c) Josh Benson DPEA                    *
//      *                                                                *
//      ******************************************************************

Notes:

This fle is to help you use the RS485 library.
    Using main.py you can:
        -add multiple slave Arduino boards
        -call from a wide range of pre written callables
        -run different methods that call from the callable list to unlock complete hardware control


As of right now the working callables include:
    moveStepper
    blinkLED
    toggleLED
    disable

At the top of the main.py file, do a few things

Do the following import lines:

from pidev.SlaveMaster import SerialMaster, Arduino
from pidev import RPiMIB
import time

And open the path:

RPiMIB.openSPI()

Create an Arduino Object:

a = Arduino(SerialMaster(baud=115200), 17)

The line above declares 'a' as an Arduino Object, at port 17.
Each Arduino will have its own name (in this case, 'a'), and its own port, in this case '17'
The port is declared at the top of the Arduino file, with '#define ADDRESS 17'
(The port is arbitrary)


void moveStepper(byte dataLength, byte *dataArray) {

    Description: Basic function to move stepper an amount of steps in a direction.
    (Use setSpeed to set the stepper speed)

    How to use:

    An example of how to call the function in the py file would be:

    print(a.moveStepper([1, 1] + list((200).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter determines the port of the motor (i.e. 1, 2...)

    The second parameter determines the direction of the stepper.
        '0' is ClockWise and '1' is CounterClockWise

    The '200' in the list to bytes section of the code is the steps.
    The stepper needs 800 steps in order to make a full revolution, when it is  in the quarter step setting.
    The step setting can be changed on the Arduino Board, and should be updated in the code.
    For example, in the full step mode, 200 steps will result in a revolution.

    The 'a' at the beginning of the call is the Arduino Object.

}

void disable(byte dataLength, byte *dataArray) {

Description: Frees the stepper motor. This prevents overheating!

How to use:

An example of how to call the function in the py file would be:

print(a.disable([1, 1] + list((800).to_bytes(2, "little")), format_out=FORMAT_STRING))

The disable function takes two parameters, and then does nothing with them.
Feel free to put anything for the parameters! (Any integer between 0 and 255)

}

void blinkLED(byte dataLength, byte *dataArray) {

    Description: Blinks an LED at a specified port with a specified wait time

    How to use:

    An example of how to call the function in the py file would be:

    print(a.blinkLED([23, 200] + list((800).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter is the pin number, and the second parameter is the waitTime.

}

void toggleLED(byte dataLength, byte *dataArray) {

    Description:

}

void setStepperSpeed(byte dataLength, byte *dataArray) {

Method Call:

    print(a.setStepperSpeed([1, 1] + list((500).to_bytes(2, "little")), format_out=FORMAT_STRING))

    Parameters: First Parameter is port, second parameter is direction, third parameter is speed

}


void setStepperAcceleration(byte dataLength, byte *dataArray) {


}


void moveStepperHome(byte dataLength, byte *dataArray) {
    print(a.moveStepperHome([1, 1] + list((29).to_bytes(2, "little")), format_out=FORMAT_STRING))

    The first parameter is the stepper port, the second parameter is the direction, and the list parameter is the switch port.

     f

}

 b



